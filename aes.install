<?php

function aes_requirements($phase) {
 include_once 'aes.module';

 if (aes_load_phpsec() === TRUE) {
  $requirement_severity = REQUIREMENT_OK;
 }
 else {
  $requirement_severity = REQUIREMENT_ERROR;
 }
 
 $requirements = array(
  array(
  'title' => 'AES encryption implementation',
  'description' => 'The AES encryption module requires the PHP Secure Communications Library (phpseclib) to be installed in the AES directory. Check the README.txt for more information.',
  'severity' => $requirement_severity,
  ),
 );
 
 return $requirements;
}

function aes_install() {
  drupal_install_schema("aes");
  
  variable_set("aes_key_storage_method", "Database");
  variable_set("aes_cipher", "rijndael-128");
  variable_set("aes_convert", "true");
  variable_set("aes_viewing_method", "collapsible");
  
 include_once 'aes.module';
 if (aes_load_phpsec() === TRUE) {
  $install_msg = t("AES module operational: phpseclib found!");
 }
 else {
  $install_msg = t("AES module not opeartional: phpseclib not found!");
 }
 drupal_set_message($install_msg);
}

/**
 * Set AES implementation.
 */
function aes_update_6100(&$sandbox) {
 // This update hook used to detect which implementation was best, but now it
 // simply sets the implementation to 'mcrypt', which was the only option
 // before the version this hook was introduced. This variable is only used
 // when decrypting legacy data.
 variable_set('aes_implementation', 'mcrypt');
  
 return array();
}

/**
 * Generate new, crytographically random key.
 */
function aes_update_6101(&$sandbox) {
 // Copy old key variables to legacy variables.
 $variables = array(
  'aes_key_storage_method',
  'aes_key',
  'aes_key_path',
 );
 foreach ($variables as $name) {
  $value = variable_get($name, NULL);
  if ($value !== NULL) {
   variable_set($name . '_legacy', $value);
  }
 }

 // Move legacy file-based key to new location.
 if (variable_get('aes_key_storage_method_legacy', 'Database') == 'File') {
  $key_path = variable_get('aes_key_path_legacy', NULL);
  if ($key_path) {
   $new_key_path = $key_path . '-legacy';
   if (rename($key_path, $new_key_path)) {
    variable_set('aes_key_path_legacy', $new_key_path);
   }
   else {
    // If we can't move the legacy file to a new location, then at the very
    // least we need to make sure the current key doesn't point to the same
    // file, so we delete the path and set the storage method to database.
    variable_del('aes_key_path');
    variable_set('aes_key_storage_method', 'Database');
   }
  }
 }

 // Make a new key and re-encrypt password data.
 include_once 'aes.module';
 if (aes_store_key(aes_make_key())) {
  $a = db_query("SELECT uid, pass FROM {aes_passwords} WHERE uid != 0");
  
  $updates_num = 0;
  while ($user = db_fetch_array($a)) {
   // We simply need to aes_decrypt() and aes_encrypt() without passing in the
   // key because it'll detect that this is old encrypted data, and use the
   // legacy key.
   $plain_pass = aes_decrypt($user['pass']);
   $new_pass = aes_encrypt($plain_pass);
   $updates_num++;
   
   db_query("UPDATE {aes_passwords} SET pass='%s' WHERE uid=%d", $new_pass, $user['uid']);
  }

  drupal_set_message(t("Updated the passwords of !updates_num users because of a change in key.", array('!updates_num' => $updates_num)));
 }
 else {
  drupal_set_message(t("Unable to generate new key - you'll need to generate a new crytograhically random key yourself", "error"));
 }

 return array();
}

function aes_schema() {
 
 $schema['aes_passwords'] = array(
  'fields' => array(
   'uid' => array('type' => 'int', 'unsigned' => true, 'not null' => true, 'default' => 0),
   'pass' => array('type' => 'varchar', 'length' => 128, 'not null' => true, 'default' => ''),
   ),
  'primary key' => array('uid'),
 );
 
 return $schema;
}

function aes_uninstall() {
  //delete keyfile
  if (variable_get("aes_key_storage_method", "") == "File") {
    unlink(variable_get("aes_key_path", ""));
  }
  
  drupal_uninstall_schema("aes");
  
  //delete variables
  variable_del("aes_key");
  variable_del("aes_convert");
  variable_del("aes_key_storage_method");
  variable_del("aes_key_path");
  variable_del("aes_key");
  variable_del("aes_encryption_iv");
  variable_del("aes_cipher");
  variable_del("aes_viewing_method");
  variable_del("aes_implementation");
  
  drupal_set_message(t("AES uninstalled."));
}

